-- Basic:
-- Retrieve the total number of orders placed.

SELECT COUNT(order_id) AS Total_orders
FROM orders;

-- Calculate the total revenue generated from pizza sales.
SELECT
	ROUND(SUM(order_details.quantity * pizzas.price),2) AS Total_Sales
FROM order_details JOIN pizzas
ON pizzas.pizza_id = order_details.pizza_id;

-- Identify the highest-priced pizza.

SELECT
	pizza_types.name,
    pizzas.price
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY  pizzas.price DESC
LIMIT 1;

-- Identify the most common pizza size ordered.

SELECT
	pizzas.size,
    COUNT(order_details.order_details_id) AS Order_Count
FROM pizzas JOIN order_details
ON pizzas.pizza_id = orders.order_id
GROUP BY pizzas.size 
ORDER BY Order_count DESC
LIMIT 1 ;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT
	pizza_types.name,
    SUM(order_details.quantity) AS Quantity
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id =  pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY Quantity DESC
LIMIT 5 ;

-- -----------------------------------------------------------------------
-- ------------------------------------------------------------------------
-- -----------------------------------------------------------------------
-- ----------------------------------------------------------------------

-- Intermediate:

-- Join the necessary tables to find the total quantity of 
-- each pizza category ordered.

SELECT 
	pizza_types.category,
	SUM(order_details.quantity) AS quantity
FROM 
	pizza_types 
		JOIN 
	pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
		JOIN 
	order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category 
ORDER BY quantity DESC;
	

-- Determine the distribution of orders by hour of the day.

SELECT 
	HOUR(order_time) AS hour,
	COUNT(order_id) AS Order_Count
FROM 
	orders
GROUP BY HOUR(order_time);


-- Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
	category,
	COUNT(name)
FROM 
	pizza_types 
GROUP BY category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT ROUND(AVG(quantity),0) AS avg_pizza_ordered_per_day
FROM
(SELECT 
	DAY(orders.order_date) AS Day_name,
	SUM(order_details.quantity) AS Order_Quantity
FROM 
	orders
		JOIN 
	order_details ON orders.order_id = order_details.order_id
GROUP BY orders.order_date ) AS order_quantity;
	

-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
	pizza_types.name,
	SUM(order_details.quantity * pizzas.price) AS revenue
FROM
	pizza_types 
	JOIN 
    pizzas ON pizzas.pizza_type_id = pizza_types.pizza_type_id
    JOIN
    order_details
    ON order_details_id = pizza_id
    GROUP BY pizza_types.name 
    ORDER BY revenue DESC LIMIT 3;

-- -----------------------------------------------------------------------
-- ----------------------------------------------------------------------
-- -----------------------------------------------------------------------
-- ----------------------------------------------------------------------
-- Advanced:
-- Calculate the percentage contribution of each pizza type to total revenue.

SELECT
	pizza_types.category,
    ROUND(SUM(order_details.quantity *  pizzas.price)/
		  (SELECT
				ROUND(SUM(order_details.quantity * pizzas.price),2) AS Total_Sales
		  FROM
				order_details
                JOIN
                pizzas ON pizzas_id = order_details.pizza_id)*100,2) AS Revenue
FROM
	pizza_types
    JOIN
    pizzas ON pizza_types.pizza_type_id =  pizzas.pizza_type_id
    JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category 
ORDER BY Revenue DESC;


-- Analyze the cumulative revenue generated over time.

SELECT
	order_date,
    SUM(Revenue) OVER(ORDER BY order_date) AS cumu_revenue
FROM
		  (SELECT
				order_details.order_date,
                SUM(order_details.quantity  * pizzas.price) AS Revenue
		  FROM
				order_details
                JOIN
                pizzas ON order_details.pizza_id = pizzas.pizza_id
				JOIN
				orders ON orders.order_id = order_details.order_id
GROUP BY orders.order_date) AS sales; 




-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT
	name,
    revenue
FROM
		  (SELECT
				category,
                name,
                revenue,
                RANK() OVER(PARTITION BY category ORDER BY revenue DESC) AS rn
		  FROM
				(SELECT
					pizza_types.category,
                    pizza_types.name,
                    SUM((order_details.quantity)*pizzas.price) as revenue
				FROM	
					pizza_types
					JOIN
					pizzas ON pizza_types.pizza_types_id = pizzas.pizza_types_id
					JOIN
					order_details ON order_details.pizza_id = pizzas.pizza_types_id
				GROUP BY pizza_types.category,  pizza_types.name) AS a) AS b
WHERE rn <= 3;


